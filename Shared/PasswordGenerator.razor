@using System.Security.Cryptography;
@using OnlinePasswordGenerator.Data;
@using System.Text
@inject IJSRuntime js

<div class="w3-padding">
    <Sticky>
        <div class="w3-padding w3-round w3-margin-bottom w3-xxlarge w3-bottombar w3-border-green w3-white w3-card w3-display-container" style="min-height: 1.8em; overflow: hidden;">
            @generatedPassword
            <div class="w3-large w3-display-right" style="z-index: 1; background-color: #fff!important; padding-right: 16px;">
                <button class="w3-button w3-large w3-round" title="Copy password" @onclick=copy>✂</button>
                <button class="w3-button w3-large w3-round" title="Generate new password" @onclick=getNext>↻</button>
            </div>
        </div>
    </Sticky>
    <div class="w3-padding w3-round w3-white w3-card">
        <h2 class="w3-border-bottom">Customize Password</h2>
        <h4>Length</h4>
        <div class="w3-row-padding">
            <div class="w3-col" style="width: 6em;">
                <input class="w3-input w3-border w3-round-large" type="number" @bind=size>
            </div>
            <div class="w3-rest">
                <input type="range" min="1" max="100" class="w3-input slider" @bind=size>
            </div>
        </div>
        

        <h4>Allowed Characters</h4>
        <div class="w3-row-padding">
        @foreach (var set in allowed) {
            <div class="w3-third">
                <input class="w3-check" type="checkbox" @bind=@set.IsEnabled> <label>@set.Name <small>(@set.Description)</small></label>
            </div>
        }
        </div>

        <h4>Disallowed Characters</h4>
        <div class="w3-row-padding">
        @foreach (var set in disallowed) {
            <div class="w3-third">
                <input class="w3-check" type="checkbox" @bind=@set.IsEnabled> <label>@set.Name <small>(@set.Description)</small></label>
            </div>
        }
        </div>

        <div class="w3-padding w3-margin top w3-center">
            <button class="w3-button w3-green w3-round-large" title="Generate new password" @onclick=getNext>↻ Generate</button>
        </div>
    </div>
</div>

@if (showCopied) {
<div class="w3-padding w3-animate-bottom w3-green w3-round-xlarge w3-xlarge" style="position: fixed; bottom: 16px; left: 50%; transform: translate(-50%, -50%); margin: 0 auto;">
    Copied!
</div>
}


@code {
    private static List<ICharacterSet> allowed = new List<ICharacterSet>{
        new UppercaseLettersSet(),
        new LowercaseLettersSet(),
        new DigitsSet(),
        new SpecialSet(),
        new BracketSet(),
        new SpaceSet(),
        new WhitespaceSet(),
        new MinusSet(),
        new DashesSet(),
        new UnderscoreSet(),
    };
    private static List<ICharacterSet> disallowed = new List<ICharacterSet>{
        new SimilarSet(),
    };
    private int RandomNumber(int fromInclusive, int toExclusive) => System.Security.Cryptography.RandomNumberGenerator.GetInt32(fromInclusive, toExclusive);
    private int size = 20;
    private string generatedPassword = string.Empty;

    protected override void OnInitialized() {
        getNext();
    }

    private void getNext() {
        var chars = allowed
            .Where(set => set.IsEnabled)
            .SelectMany(x => x.GetChars())
            .Except(disallowed.Where(set => set.IsEnabled).SelectMany(x => x.GetChars()))
            .Distinct()
            .ToList();
        if (chars.Count == 0) {
            return;
        }
        
        var builder = new StringBuilder(size);
        for (var i = 0; i < size; i++) {
            var randomIndex = RandomNumber(0, chars.Count);
            builder.Append(chars[randomIndex]);
        }
        generatedPassword = builder.ToString();
    }

    private bool showCopied = false;
    private async Task copy() {
        await js.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
        showCopied = true;
        await InvokeAsync(hideCopy);
    }
    private async Task hideCopy() {
        await Task.Delay(6_000);
        showCopied = false;
        await InvokeAsync(StateHasChanged);
    }

}

